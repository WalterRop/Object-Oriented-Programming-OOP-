class Smartphone:
    def __init__(self, brand, model, storage, battery_life):
        self.brand = brand
        self.model = model
        self.storage = storage  # in GB
        self.battery_life = battery_life  # in hours

    def make_call(self, number):
        return f"Calling {number}..."

    def take_photo(self):
        return f"Taking a photo with {self.brand} {self.model}!"

    def get_specs(self):
        return f"{self.brand} {self.model} - {self.storage}GB, {self.battery_life} hours battery life."


# Inheritance: Creating a subclass
class SmartphoneWithCamera(Smartphone):
    def __init__(self, brand, model, storage, battery_life, camera_megapixels):
        super().__init__(brand, model, storage, battery_life)
        self.camera_megapixels = camera_megapixels

    def take_photo(self):
        return f"Taking a {self.camera_megapixels}MP photo with {self.brand} {self.model}!"

# Example usage
my_phone = SmartphoneWithCamera("Apple", "iPhone 14", 128, 20, 12)
print(my_phone.get_specs())
print(my_phone.make_call("123-456-7890"))
print(my_phone.take_photo())

ACTIVITY 2
class Vehicle:
    def move(self):
        pass  # This will be overridden in subclasses

class Car(Vehicle):
    def move(self):
        return "Driving 🚗"

class Plane(Vehicle):
    def move(self):
        return "Flying ✈️"

class Bicycle(Vehicle):
    def move(self):
        return "Cycling 🚲"

# Example usage
def vehicle_movement(vehicle):
    print(vehicle.move())

# Create instances
my_car = Car()
my_plane = Plane()
my_bicycle = Bicycle()

# Test polymorphism
vehicle_movement(my_car)      # Output: Driving 🚗
vehicle_movement(my_plane)    # Output: Flying ✈️
vehicle_movement(my_bicycle)  # Output: Cycling 🚲
